from collections import defaultdict
from typing import List

class Solution:
    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:
        tree = defaultdict(list)
        for u, v in edges:
            tree[u].append(v)
            tree[v].append(u)
        
        n = len(amount)
        # Step 1: Record Bob's arrival time
        bob_time = [-1] * n
        def dfs_bob(node, parent, time):
            if node == 0:
                bob_time[node] = time
                return True
            for nei in tree[node]:
                if nei == parent:
                    continue
                if dfs_bob(nei, node, time + 1):
                    bob_time[node] = time
                    return True
            return False
        dfs_bob(bob, -1, 0)

        # Step 2: DFS for Alice to all leaves
        res = float('-inf')
        def dfs_alice(node, parent, time, income):
            # Decide what Alice gets at this node
            if bob_time[node] == -1 or time < bob_time[node]:
                income += amount[node]
            elif time == bob_time[node]:
                income += amount[node] // 2
            # else Bob came earlier, gate is already open â€” income unchanged

            # Leaf node: no children except parent
            if len(tree[node]) == 1 and node != 0:
                nonlocal res
                res = max(res, income)
                return
            
            for nei in tree[node]:
                if nei == parent:
                    continue
                dfs_alice(nei, node, time + 1, income)
        
        dfs_alice(0, -1, 0, 0)
        return res
